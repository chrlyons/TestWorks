version: '3.8'
services:
  db:
    image: postgres:16.2
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: test
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U testuser -d test" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: backend
      dockerfile: test.Dockerfile
    working_dir: /backend/app
    hostname: backend
#    ports:
#      - "8000:8000"
#    volumes:
#      - ./src/backend:/backend
    command: bash -c "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    environment:
      PYTHONUNBUFFERED: 1
      DATABASE_URL: postgresql://testuser:testpassword@db:5432/test
      ALGORITHM: "HS256"
      SECRET_KEY: "1<3TwoTestThings!123456789"
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie.name=backend_cookie"

  frontend:
    build:
      context: frontend
      dockerfile: test.Dockerfile
      args:
        REACT_APP_API_URL: http://localhost
    hostname: frontend
#    ports:
#      - "3000:3000"
    depends_on:
      - backend
    links:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  redis:
    container_name: redis
    image: "redis:alpine"
    ports:
      - "6379:6379"

  traefik:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

volumes:
  postgres_data:
